@page "/request/{myStopId}"

@inject IHttpClientFactory _clientFactory
@inject NavigationManager navigationManager


<h3>Stop id:@myStopId</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (request is null)
{
    <div class="h4">Loading...</div>
}
else
{
    <div class="card-columns">
        @foreach (var service in request.services)
        {
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title">Bus number @service.service_name going to @service.departures[0].destination </h6>
                    <h7 class="card-text">Next bus will arrive in @service.first_departure min(s)</h7>
                    <h8>Also in: </h8>
                    @for (int i = 1; i < service.departures.Length; i++)
                    {
                        <h8>@service.departures[i].minutes, </h8>
                    }
                    <h8>min</h8>
                </div>
            </div>
        }
    </div>
}

@code {
    RequestModel request;
    string errorString;
    [Parameter]
    public string myStopId { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var httpRequest = new HttpRequestMessage(HttpMethod.Get, $"https://tfeapp.com/api/website/stop_times.php?stop_id={myStopId}");

        var client = _clientFactory.CreateClient();

        HttpResponseMessage httpResponse = await client.SendAsync(httpRequest);

        if (httpResponse.IsSuccessStatusCode)
        {
            request = await httpResponse.Content.ReadFromJsonAsync<RequestModel>();
            errorString = null;
        }
        else
        {
            errorString = $"There was an error getting bus info: {httpResponse.ReasonPhrase}";
        }

    }
}
